// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DeadmansSwitch {
    address public owner;
    address public beneficiary;
    uint public lastActiveBlock;
    uint public switchBlocks = 10;

    constructor(address _beneficiary) {
        owner = msg.sender;
        beneficiary = _beneficiary;
        lastActiveBlock = block.number;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    function still_alive() public onlyOwner {
        require(block.number <= lastActiveBlock + switchBlocks, "Switch already triggered");
        lastActiveBlock = block.number;
    }

    function is_switch_triggered() public view returns (bool) {
        return block.number > lastActiveBlock + switchBlocks;
    }

    function trigger_switch() public onlyOwner {
        require(is_switch_triggered(), "Switch not triggered");
        selfdestruct(payable(beneficiary));
    }
}
